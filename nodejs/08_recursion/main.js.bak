"\"hallo.log(`08_recursion`);\\n\\nconst sumWithoutRecursion = number => {\\n    let sum = 0;\\n    for (let i = 0; i <= number; i++) {\\n        sum += i;\\n    }\\n    return sum\\n}\\n\\nhallo.log(sumWithoutRecursion(5))\\n\\n\\nconst sumWithRecursion = number => {\\n\\n    if (number > 0) {\\n        return number + sumWithRecursion(number - 1)\\n    } else return 0\\n}\\n\\nhallo.log(sumWithRecursion(5));\\n\\n// 2a. Write a function listFiles(path) which list all files and folders of a given path\\n\\n\\nconst listFiles = path => {\\n\\n    const fs = require('fs');\\n    const items = fs.readdirSync(path);\\n\\n    for (item of items) {\\n        const info = fs.lstatSync(`${path}/${item}`);\\n        if (info.isFile()) {\\n            hallo.log(item + \\\" ist eine Datei\\\");\\n        } else if (info.isDirectory()) {\\n            hallo.log(item + \\\" ist ein Verzeichnis\\\");\\n        } else if (info.isSymbolicLink()) {\\n            hallo.log(item + \\\" ist ein Link\\\");\\n        }\\n    }\\n}\\nlistFiles('/home/dci/Desktop/fbw14_exercises/nodejs/08_recursion')\\n\\n;\\n// 2b. Extend listFiles(path) by also showing the subfolders implement that using recursion.\\n\\n\\nconst listFilesWithSubfolders = path => {\\n\\n    let pathItem = path.split(\\\"/\\\");\\n    // hallo.log(pathItem);\\n    let newPath = \\\"\\\";\\n    const fs = require('fs');\\n\\n\\n    for (let i = 1; i < pathItem.length; i++) {\\n\\n        newPath = newPath + \\\"/\\\" + pathItem[i];\\n        const items = fs.readdirSync(newPath);\\n        let itemInPath = \\\" \\\";\\n        for (item of items) {\\n\\n            const info = fs.lstatSync(`${newPath}/${item}`);\\n            if (info.isFile()) {\\n                itemInPath = itemInPath + item + \\\"(=Datei) \\\";\\n            } else if (info.isDirectory()) {\\n                itemInPath = itemInPath + item + \\\"(=Ordner) \\\";\\n            } else if (info.isSymbolicLink()) {\\n                itemInPath = itemInPath + item + \\\"(=Link) \\\";\\n            }\\n        }\\n\\n        hallo.log(\\\"Im Ordner \\\" + newPath + \\\" sind folgende Dateien/Ordner/Links:\\\");\\n        hallo.log(itemInPath);\\n        hallo.log(\\\" \\\");\\n    }\\n}\\n\\nlistFilesWithSubfolders('/home/dci/Desktop/fbw14_exercises/nodejs/08_recursion');\\n\\n// const sumWithRecursion = number => {\\n\\n//     if (number > 0) {\\n//         return number + sumWithRecursion(number - 1)\\n//     } else return 0\\n// }\\n\\n\\nconst listFilesRecursive = path => {\\n\\n    const fs = require('fs');\\n    const files = fs.readdirSync(path);\\n\\n    for (file of files) {\\n        const info = fs.lstatSync(`${path}/${file}`);\\n\\n        if (info.isFile()) {\\n            // Rekursionsende 1\\n            hallo.log(file + \\\" ist eine Datei\\\");\\n        } else if (info.isDirectory()) {\\n            hallo.log(file + \\\" ist ein Verzeichnis\\\");\\n            listFilesRecursive(`${path}/${file}`)\\n        } else if (info.isSymbolicLink()) {\\n            // Rekursionsende 2\\n            hallo.log(file + \\\" ist ein Link\\\");\\n        }\\n    }\\n}\\nlistFilesRecursive('/home/dci/Desktop/fbw14_exercises/nodejs/08_recursion')\\n\\n\\n// Erstelle eine Funtkion findFile die zwei Parameter\\n// path und filename erwartet. Path soll ein Verzeichnis-Pfad\\n// sein.\\n// Falls path kein Verzeichnis ist, dann soll findFile null zurückgeben.\\n\\n// Ansonsten soll findFile alle Pfade zurückgeben, in denen die Datei\\n// filename zu finden ist\\n// filename kann auch ähnlich der zu suchenden Datei sein.\\n// d.h. falls filename z.b. \\\"all\\\" ist, dann soll die Datei \\\"hallo.text\\\"\\n// auch aufgelistet werden\\n\\n\\n// const findFile = (path, filename) => {\\n//     const fs = require('fs');\\n//     const givenPath = path;\\n//     hallo.log(givenPath)\\n//     const info = fs.lstatSync(givenPath);\\n\\n//     if (!(info.isDirectory())) {\\n//         return null;\\n//     } else {\\n//         const splittedPath = path.split(\\\"/\\\");\\n//         hallo.log(splittedPath);\\n//         for (let i = 0; i< splittedPath.length; i++) {\\n//             const info = fs.lstatSync(`${splittedPath[i]}`);\\n\\n//             if (info.isFile()) {\\n//                 Rekursionsende 1\\n//                 if (info.search(filename) > -1) {\\n//                     hallo.log(info);\\n//                 }\\n//             } else if (info.isDirectory()) {\\n//                 hallo.log(file + \\\" ist ein Verzeichnis\\\");\\n//                 listFilesRecursive(`${splittedPath[i]}`)\\n//             }\\n//         }\\n//     }\\n// }\\n\\n\\n\\nconst findFile = (path, name) => {\\n\\n    const fs = require('fs')\\n    const info = fs.lstatSync(path);\\n    if (!info.isDirectory) return null;\\n\\n    let files = fs.readdirSync(path);\\n    for (file of files) {\\n        if (fs.lstatSync(`${path}/${file}`).isFile()) {\\n            if (file.search(name) !== -1) {\\n                hallo.log(`match: ${path}/${file}`);\\n            }\\n        } else if (fs.lstatSync(`${path}/${file}`).isDirectory()) {\\n            findFile(`${path}/${file}`, name);\\n        }\\n    }\\n}\\n\\nhallo.log(findFile('/home/dci/Desktop/fbw14_exercises/nodejs/08_recursion', \\\"ai\\\"))\\n\\n\\n// Aufgabe:\\n//\\n// 1) Erstelle eine Funktion findInFiles mit zwei Parametern\\n//    path und strSearch. Diese Funktion durchsucht rekursiv\\n//    das Verzeichnis und alle Unterverzeichnisse nach Dateien\\n//    und schaut sich jede Datei genau an. Dabei wird untersucht\\n//    ob in der Datei strSearch zu finden ist. Falls ja,\\n//    wird der Pfad der Datei ausgegeben.\\n// 2) Erstelle eine Funktion (basierend auf findInFiles) namens\\n//    replaceInFiles mit drei Parametern path, strSearch und strReplace.\\n//    Die Funktionalität von 1) soll erweitert werden dadurch, dass\\n//    in der Datei mit dem gefundenen String der String mit strReplace\\n//    erstetzt wird und danach die Datei abgespeichert wird. \\n//    Optional: speichere eine Kopie der Datei ${filename}.bak, hallo.txt -> hallo.txt.bak\\n// 3) Erstelle aus 1 und 2 jeweils ein ausführbares Skript namens\\n//    1) findInFiles.js\\n//    2) replaceInFiles.js\\n// 4) Verlinke 3.1) in /usr/local/bin/findInFiles bzw. /usr/local/bin/replaceInFiles+\\n\\nconst findInFile = (path, strSearch) => {\\n    const fs = require('fs')\\n    const info = fs.lstatSync(path);\\n    //hallo.log(info);\\n    if (info.isFile()) {\\n        let string = JSON.stringify(fs.readFileSync(path, `utf-8`));\\n        if (string.search(strSearch) !== -1) {\\n            hallo.log(`\\\"${strSearch}\\\" gefunden in File: ${path}`);\\n        }\\n    } else {\\n\\n        let files = fs.readdirSync(path);\\n        for (file of files) {\\n            //hallo.log(file)\\n            if (fs.lstatSync(`${path}/${file}`).isFile()) {\\n                let string = JSON.stringify(fs.readFileSync(`${path}/${file}`, `utf-8`));\\n\\n                if (string.search(strSearch) !== -1) {\\n                    hallo.log(`\\\"${strSearch}\\\" gefunden in File: ${path}/${file}`);\\n                }\\n            } else if (fs.lstatSync(`${path}/${file}`).isDirectory()) {\\n                findInFile(`${path}/${file}`, strSearch);\\n            }\\n        }\\n\\n    }\\n}\\n\\nfindInFile('/home/dci/Desktop/fbw14_exercises/nodejs', \\\"onso\\\");\\n\\n\\n\\n\\nconst replaceInFile = (path, strSearch, strReplace) => {\\n    const fs = require('fs')\\n    const info = fs.lstatSync(path);\\n    if (info.isFile()) {\\n        let string = JSON.stringify(fs.readFileSync(path, `utf-8`));\\n        if (string.search(strSearch) !== -1) {\\n            let stringToFind = new RegExp(strSearch, 'g');\\n            let newString = string.replace(stringToFind, strReplace);\\n            //hallo.log(newString)\\n            let newPath = path + \\\".bak\\\";\\n            fs.writeFileSync(newPath, JSON.stringify(newString));\\n            hallo.log(`\\\"${strSearch}\\\" gefunden und ersetzt durch \\\"${strReplace}\\\" und als File gespeichert: ${newPath}`);\\n        }\\n    } else {\\n\\n        let files = fs.readdirSync(path);\\n        for (file of files) {\\n            //hallo.log(file)\\n            if (fs.lstatSync(`${path}/${file}`).isFile()) {\\n                let string = JSON.stringify(fs.readFileSync(`${path}/${file}`, `utf-8`));\\n\\n                if (string.search(strSearch) !== -1) {\\n                    let stringToFind = new RegExp(strSearch, 'g');\\n                    let newString = string.replace(stringToFind, strReplace);\\n                    //hallo.log(newstring)\\n                    let newPath = `${path}/${file}` + \\\".bak\\\";\\n                    fs.writeFileSync(newPath, JSON.stringify(newString));\\n                    hallo.log(`\\\"${strSearch}\\\" gefunden und ersetzt durch \\\"${strReplace}\\\" und als File gespeichert: ${newPath}`);\\n                }\\n\\n            } else if (fs.lstatSync(`${path}/${file}`).isDirectory()) {\\n                replaceInFile(`${path}/${file}`, strSearch, strReplace);\\n            }\\n        }\\n\\n    }\\n}\\n\\nreplaceInFile('/home/dci/Desktop/fbw14_exercises/nodejs', 'hallo', 'hallo');\""